Approach 1:
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count=0;
        int res=0;
        int helper=1;
        for(int i=0; i<32; i++){
            res= n & helper;
            if (res !=0){
                count++;
            }
            helper<<=1;
        }
        return count;
        
    }
};


Approach 2:
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count=0;
        while(n!=0){
            if(n%2){
                count++;
            }
            n>>=1;
        }
        return count;
        
    }
};

Approach 3:
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count=0;
        while(n!=0){
            n= n &(n-1);
            count++;
        }
        return count;
        
    }

TC and SC in all 3 cases: O(1)
};
