class Solution {
    public int climbStairs(int n) {
        if(n==0||n==1){
            return 1;
        }
        int prev=1;
        int curr=1;
        int temp=0;

        for(int i=2; i<=n; i++){
            temp=curr;
            curr=prev+curr;
            prev=temp;

        }
        return curr;

  
    }


}



class Solution {
    public int climbStairs(int n) {

        int[] dp=new int[n+1];
        dp[0]=dp[1]=1;

        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
  
    }


}



class Solution {
    public int climbStairs(int n) {
        Map<Integer, Integer> memo=new HashMap<>();
        memo.put(1,1);
        memo.put(2,2);
        return climbStairs( n, memo);   
    }

    private int climbStairs(int n, Map<Integer, Integer> memo){
        if(memo.containsKey(n)){
            return memo.get(n);
        }
        memo.put(n, climbStairs(n-2, memo)+climbStairs(n-1, memo));
        return memo.get(n);
    }
}
